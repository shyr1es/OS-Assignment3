
Solution for Question 3.26:
Design a Program Using Ordinary Pipes for Message Transformation:

This program uses two pipes:

Pipe 1: Transfers the original message from the parent process to the child process.
Pipe 2: Transfers the modified message (with reversed case) from the child process back to the parent process.
Code Implementation (PipeMessageTransform.c)


Explanation:
Pipes:

Pipe 1 transfers the original message from the parent to the child.
Pipe 2 sends the modified message back to the parent.
Parent Process:

Sends a message through Pipe 1.
Receives the modified message from Pipe 2 and displays it.
Child Process:

Reads the message from Pipe 1.
Reverses the case of each character.
Sends the modified message through Pipe 2.
Key Functions:

pipe(): Creates a pipe.
fork(): Splits the process into parent and child.
read() and write(): Used for communication through pipes.
